generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/beautygo/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Core BeautyGO models
enum UserRole {
    CLIENT
    PROFESSIONAL
    ADMIN
}

enum ServiceCategory {
    HAIR
    NAILS
    SKINCARE
    MAKEUP
    EYEBROWS
}

enum BookingStatus {
    PENDING
    CONFIRMED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum PaymentMethod {
    CASH
}

model User {
    id               String    @id @default(cuid())
    email            String    @unique
    password         String
    name             String
    phone            String?
    role             UserRole  @default(CLIENT)
    image            String?
    bio              String?
    isApproved       Boolean   @default(false)
    specialties      String[]  @default([])
    address          String?
    city             String?
    state            String?
    zipCode          String?
    rating           Float     @default(0)
    totalReviews     Int       @default(0)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    emailVerified    DateTime?
    
    // Relations
    accounts         Account[]
    sessions         Session[]
    bookingsAsClient Booking[] @relation("ClientBookings")
    bookingsAsProfessional Booking[] @relation("ProfessionalBookings")
    servicesOffered  Service[]
    reviewsGiven     Review[]  @relation("ReviewsGiven")
    reviewsReceived  Review[]  @relation("ReviewsReceived")
    availability     Availability[]
    payments         Payment[]
    
    @@map("users")
}

model Category {
    id          String          @id @default(cuid())
    name        String          @unique
    nameEs      String          // Spanish name
    nameEn      String          // English name
    description String?
    icon        String?
    category    ServiceCategory
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    
    // Relations
    services    Service[]
    
    @@map("categories")
}

model Service {
    id              String          @id @default(cuid())
    name            String
    nameEs          String          // Spanish name
    nameEn          String          // English name
    description     String?
    descriptionEs   String?         // Spanish description
    descriptionEn   String?         // English description
    price           Float
    duration        Int             // Duration in minutes
    image           String?
    category        ServiceCategory
    isActive        Boolean         @default(true)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    
    // Relations
    professionalId  String
    professional    User            @relation(fields: [professionalId], references: [id], onDelete: Cascade)
    categoryId      String
    serviceCategory Category        @relation(fields: [categoryId], references: [id])
    bookings        Booking[]
    reviews         Review[]
    
    @@map("services")
}

model Booking {
    id              String        @id @default(cuid())
    date            DateTime
    time            String
    status          BookingStatus @default(PENDING)
    totalAmount     Float
    platformFee     Float         // 20% commission
    professionalEarnings Float
    address         String
    city            String
    state           String
    zipCode         String
    notes           String?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    
    // Relations
    clientId        String
    client          User          @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
    professionalId  String
    professional    User          @relation("ProfessionalBookings", fields: [professionalId], references: [id], onDelete: Cascade)
    serviceId       String
    service         Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    payment         Payment?
    review          Review?
    
    @@map("bookings")
}

model Review {
    id          String   @id @default(cuid())
    rating      Int      // 1-5 stars
    comment     String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relations
    clientId       String
    client         User     @relation("ReviewsGiven", fields: [clientId], references: [id], onDelete: Cascade)
    professionalId String
    professional   User     @relation("ReviewsReceived", fields: [professionalId], references: [id], onDelete: Cascade)
    serviceId      String
    service        Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    bookingId      String   @unique
    booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    
    @@map("reviews")
}

model Availability {
    id            String   @id @default(cuid())
    dayOfWeek     Int      // 0-6 (Sunday-Saturday)
    startTime     String   // HH:MM format
    endTime       String   // HH:MM format
    isAvailable   Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    // Relations
    professionalId String
    professional   User     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
    
    @@map("availability")
}

model Payment {
    id              String        @id @default(cuid())
    amount          Float
    platformFee     Float         // 20% commission
    professionalEarnings Float
    method          PaymentMethod @default(CASH)
    status          String        @default("PENDING")
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    
    // Relations
    bookingId       String        @unique
    booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    clientId        String
    client          User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
    
    @@map("payments")
}
